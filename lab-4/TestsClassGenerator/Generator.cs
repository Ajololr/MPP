using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace TestsClassGenerator
{
    public class TestClassGenerator
    {
        public string GenerateTestClasses(string sourceCode)
        {
            string result = "";
            result += "using Xunit;\n";
            result += "\n";
            result += "namespace TestProject\n";
            result += "{\n";
            result += "\tpublic class Tests";
            result += "\t{\n";
            
            SyntaxTree syntaxTree = CSharpSyntaxTree.ParseText(sourceCode);
            List<MethodDeclarationSyntax> methods = syntaxTree.GetRoot().DescendantNodes()
                .OfType<MethodDeclarationSyntax>().ToList().Where(method => method.Modifiers.ToList().Any(token => token.Text != "pivate")).ToList();
            foreach(var method in methods)
            { 
                Console.WriteLine(((ClassDeclarationSyntax)method.Parent)?.Identifier.ValueText + method.Identifier);
                result += "\t\t[Fact]\n";
                result += "\t\tpublic void " + ((ClassDeclarationSyntax)method.Parent)?.Identifier.ValueText + method.Identifier + "()" + "\n";
                result += "\t\t{\n";
                result += "\t\t\tAssert.True(false, \"autogenerated\");\n";
                result += "\t\t}\n";
                result += "\t\t\n";
            }
            
            result += "\t}\n}\n";
            return result;
        }
    }
}
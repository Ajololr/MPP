using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace TestsClassGenerator
{
    public class TestClassGenerator
    {
        public List<TestClass> GenerateTestClasses(string sourceCode)
        {
            var result = new List<TestClass>();
            SyntaxTree syntaxTree = CSharpSyntaxTree.ParseText(sourceCode);
            List<ClassDeclarationSyntax> classes = syntaxTree.GetRoot().DescendantNodes().OfType<ClassDeclarationSyntax>().ToList();

            int index = 0;
            foreach (var classDeclaration in classes)
            {
                List<MethodDeclarationSyntax> methods = classDeclaration.DescendantNodes()
                    .OfType<MethodDeclarationSyntax>().ToList().Where(method => method.Modifiers.ToList().Any(token => token.Text != "pivate")).ToList();
                
                if (methods.Count == 0) continue;
                result.Add(new TestClass());
                result[index].FileName = classDeclaration.Identifier.ValueText + ".cs";
                
                result[index].Source += "using Xunit;\n";
                result[index].Source += "\n";
                result[index].Source += "namespace TestProject\n";
                result[index].Source += "{\n";
                result[index].Source += "\tpublic class " + classDeclaration.Identifier.ValueText;
                result[index].Source += "\t{\n";
                
                foreach(var method in methods)
                { 
                    result[index].Source += "\t\t[Fact]\n";
                    result[index].Source += "\t\tpublic void " + method.Identifier + "()" + "\n";
                    result[index].Source += "\t\t{\n";
                    result[index].Source += "\t\t\tAssert.True(false, \"autogenerated\");\n";
                    result[index].Source += "\t\t}\n";
                    result[index].Source += "\t\t\n";
                }

                result[index].Source += "\t}\n}\n";
                index += 1;
            }
            
            return result;
        }
    }

    public class TestClass
    {
        public string FileName;
        public string Source;
    }
}